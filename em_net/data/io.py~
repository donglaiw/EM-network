from em_segLib.seg_util import markInvalid
from em_net.util.io import readh5

def loadvol(input_vol_paths, label_vol_paths, \
            chunk=[None],train_ratio=[1], mark_invalid=[False]):
    # Load the vols
    train_input = []
    train_label = []
    valid_input = []
    valid_label = []
    print("Loading vols...")
    for i in range(len(input_vol_paths)):
        # input: uint8
        input_vol = readh5(input_vol_paths[i]).astype(np.float32) / 255.0
        print("Loaded {}".format(input_vol_paths[i]))
        print_vol_stats(input_vol, "input_vol")

        label_vol = readh5(label_vol_paths[i])
        print("Loaded {}".format(label_vol_paths[i]))
        print_vol_stats(label_vol, "label_vol")

        assert input_vol.shape == label_vol.shape

        if mark_invalid[i]:
            label_vol = markInvalid(label_vol)
    
        # Divide both input vol and label vol to train and valid sets
        # train_ratio=0: all for valid
        # train_ratio=1: all for training
        div_point = int(train_ratio[i] * input_vol.shape[0])
        train_input.append(input_vol[: div_point])
        valid_input.append(input_vol[div_point:])

        train_label.append(label_vol[: div_point])
        valid_label.append(label_vol[div_point:])

    return train_input, train_label, valid_input, valid_label

